@page "/tags"
@using _036_V2_Les.DB.Repositories
@using _036_V2_Les.Models

<PageTitle>Tags</PageTitle>

<!--Add tag-->
<div class="container">
	<div class="row align-content-center">
		<div class="col-6 align-content-center">
			<InputText @bind-Value="_tagName" class="form-control" />
			<button class="btn btn-primary" @onclick="AddTag">Add tag</button>
		</div>
	</div>
</div>

<div class="container">
	<div class="row align-content-center">
		<h3>Tags:</h3>
		@foreach (var tag in _tags)
		{
			<div class="card col-2">
				<div class="card-body">
					<h5 class="card-title">@tag.Name</h5>
					<div class="card-body">
						<button class="btn btn-primary" @onclick="() => EditTag(tag)">Edit</button>
						<button class="btn btn-danger" @onclick="() => DeleteTag(tag.Id)">Delete</button>
					</div>
				</div>
			</div>
		}
	</div>
</div>


@code {

	[Inject] private ITagRepository _tagService { get; set; } = default!;

	private List<Tag> _tags = new ();
	private string _tagName = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await GetTags();
	}

	private async Task GetTags()
	{
		_tags = (await _tagService.GetTags()).ToList();
	}

	private async Task AddTag()
	{
		if (!string.IsNullOrWhiteSpace(_tagName))
		{
			await _tagService.AddTag(new Tag { Name = _tagName });
			await GetTags();
			_tagName = string.Empty;
		}
	}

	private async Task DeleteTag(int id)
	{
		await _tagService.DeleteTag(id);
		await GetTags();
	}

	private async Task EditTag(Tag tag)
	{
		await _tagService.UpdateTag(new Tag { Id = tag.Id, Name = _tagName });
		_tagName = string.Empty;
		await GetTags();
	}
}
